---
import 'styles/global.scss';
import '@fontsource-variable/inter';
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <script is:inline>
    function applyTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }

    const defaultTheme = 'system';
    if (
      (defaultTheme && defaultTheme.endsWith(':only')) ||
      (!localStorage.theme && defaultTheme !== 'system')
    ) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="theme-color" content="#ffffff" />
    <meta name="generator" content={Astro.generator} />

    <meta
      name="description"
      content="Find more information about Orlando's skills and projects."
    />
    <meta name="keywords" content="front end, developer, porfolio" />
    <meta property="og:title" content="Orlando's portfolio" />
    <meta
      property="og:description"
      content="Find more information about Orlando's skills and projects."
    />
    <meta property="og:image" content="/opengraph-image.png" />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>

<script>
  const themeToggler = document.querySelectorAll('[data-toggle-color-scheme]');
  themeToggler.forEach((elem) =>
    elem.addEventListener('click', () => {
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark')
        ? 'dark'
        : 'light';
      document
        .querySelectorAll('.theme-icon')
        .forEach((elem) => elem.classList.toggle('hidden'));
    })
  );

  const inViewport = (
    entries: IntersectionObserverEntry[],
    observer: IntersectionObserver
  ) => {
    entries.forEach((entry: IntersectionObserverEntry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('fade');
        observer.unobserve(entry.target);
      }
    });
  };

  const Obs = new IntersectionObserver(inViewport, { threshold: 0.3 });

  document.querySelectorAll<HTMLElement>('[data-inviewport]').forEach((el) => {
    Obs.observe(el);
  });
</script>
